{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma = globalForPrisma.prisma || new PrismaClient();\r\nexport default prisma;\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,qJAAA,CAAA,eAAY;uCACjD;AACf,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/auth.ts"],"sourcesContent":["import NextAuth, { AuthError } from 'next-auth';\nimport Credentials from 'next-auth/providers/credentials';\nimport type { Provider } from 'next-auth/providers';\nimport { compare } from 'bcryptjs';\nimport prisma from '@/prisma';\nimport * as jose from 'jose';\n\ninterface CustomUser {\n  id: string;\n  role: string;\n  username: string;\n  email: string;\n  name: string;\n  image: string | null;\n}\n\n/*\n// Generate a secure key (in production, use environment variables)\nexport const SECRET_KEY = new TextEncoder().encode(\n  process.env.NEXTAUTH_SECRET\n);\n// JOSE encryption configuration\nconst ENCRYPTION_ALG = 'A256GCM'; // AES-GCM with 256-bit key\nconst KEY_ALG = 'dir';           // Direct encryption with shared key\n/**\n * Custom JWT Encoding function using JOSE\n * @param token - The token to encrypt\n * /\nexport async function encodeJWT({ token }: { token: jose.JWTPayload }): Promise<string> {\n  try {\n    // Convert token to a string for encryption\n    const tokenString = JSON.stringify(token);\n\n    // Create a JWE (JSON Web Encryption)\n    const jwe = await new jose.CompactEncrypt(\n      new TextEncoder().encode(tokenString)\n    )\n      .setProtectedHeader({\n        alg: KEY_ALG,\n        enc: ENCRYPTION_ALG\n      })\n      .encrypt(SECRET_KEY);\n\n    return jwe;\n  } catch (error) {\n    console.error(\"Error encoding JWT:\", error);\n    throw new Error(\"Failed to encode JWT\");\n  }\n}\n\n/**\n * Custom JWT Decoding function using JOSE\n * @param token - The encrypted token to decrypt\n * /\nexport async function decodeJWT(token: string): Promise<jose.JWTPayload> {\n  try {\n    // Decrypt the JWE\n    const { plaintext } = await jose.compactDecrypt(token, SECRET_KEY);\n\n    // Convert decrypted data back to an object\n    const decodedToken = JSON.parse(new TextDecoder().decode(plaintext));\n    return decodedToken;\n  } catch (error) {\n    console.error(\"Error decoding JWT:\", error);\n    throw new Error(\"Failed to decode JWT\");\n  }\n}\n// Example of using custom payloads in the token\nexport interface CustomJWT extends jose.JWTPayload {\n  user?: {\n    id: string;\n    name?: string;\n    email?: string;\n    role?: string;\n  };\n  customClaims?: {\n    permissions?: string[];\n    metadata?: Record<string, any>;\n  };\n}\n*/\n\nconst providers: Provider[] = [\n  Credentials({\n    credentials: {\n      username: { label: \"Username\", type: \"text\" },\n      password: { label: \"Password\", type: \"password\" }\n    },\n    async authorize(c) {\n      if (!c?.username || !c?.password) throw new AuthError(\"Campos não preenchidos!\");\n      const { username, password } = c as { username: string, password: string };\n      // Buscar usuário\n      const user = await prisma.user.findUnique({ where: { username } });\n\n      if (!user || !user.password || !user?.isActive)\n        throw new AuthError(\"Credenciais inválidas!\");\n      // Verificar senha\n      if (!(await compare(password, user.password)))\n        throw new AuthError(\"Credenciais inválidas!\");\n      return {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n      };\n    },\n  }),\n];\n\n\nif (!process.env.AUTH_SECRET) {\n  console.warn('Missing environment variable \"AUTH_SECRET\"');\n}\nif (!process.env.DATABASE_URL) {\n  console.warn('Missing environment variable \"DATABASE_URL\"');\n}\n\nexport const providerMap = providers.map((provider) => {\n  if (typeof provider === 'function') {\n    const providerData = provider();\n    return { id: providerData.id, name: providerData.name };\n  }\n  return { id: provider.id, name: provider.name };\n});\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers,\n  secret: process.env.AUTH_SECRET,\n  pages: {\n    signIn: '/auth/signin',\n  },\n  callbacks: {\n    authorized({ auth: session, request: { nextUrl } }) {\n      const isLoggedIn = !!session?.user;\n      const isPublicPage = nextUrl.pathname.startsWith('/');\n\n      if (isPublicPage || isLoggedIn) {\n        return true;\n      }\n\n      return false; // Redirect unauthenticated users to login page\n    },\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n        token.username = (user as CustomUser).username;\n        token.role = (user as CustomUser).role ?? \"\";\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id as string;\n        session.user.username = token.username as string;\n        session.user.role = token.role as string;\n      }\n      return session;\n    }\n  },\n  events: {\n    async signIn({ user }) {\n      console.log(`Usuário logado: ${(user as CustomUser).username}`);\n    },\n    async signOut({ token }: any) {\n      // Remover tokens ao fazer logout\n      await prisma.account.deleteMany({\n        where: {\n          userId: token.id as string,\n          provider: \"credentials\",\n        },\n      });\n      console.log(`Usuário deslogado: ${token.username}`);\n    },\n  },\n  session: {\n    strategy: \"jwt\"\n  },\n  logger: {\n    error(code, ...message) { },\n    warn(code, ...message) { },\n    debug(code, ...message) { },\n  },\n});\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["// middleware.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { auth } from \"@/auth\";\n\n// Using Next-Auth v5's middleware pattern\nexport default auth(async (req) => {\n  // The auth function adds the auth object to the request\n  const { auth: session } = req;\n  const { nextUrl } = req;\n  \n  // Redirect non-admin users away from dashboard\n  if (session?.user?.role !== \"ADMIN\" && nextUrl.pathname.startsWith(\"/dashboard\")) {\n    return NextResponse.redirect(new URL(\"/\", nextUrl.origin));\n  }\n\n  // Handle API route permissions\n  if (nextUrl.pathname.startsWith(\"/api/v2/dashboard\")) {\n    // Check if user has required role for dashboard API\n    if (!session?.user || ![\"ADMIN\", \"USER\"].includes(session?.user?.role||\"DRIVER\")) {\n      return NextResponse.json(\n        { message: \"Unauthorized access\" },\n        { status: 403 }\n      );\n    }\n  }\n\n  // Let auth API routes pass through\n  if (nextUrl.pathname.startsWith(\"/api/auth\")) {\n    return NextResponse.next();\n  }\n\n  // If user is NOT logged in and tries to access protected routes\n  if (!session?.user && !nextUrl.pathname.startsWith(\"/auth/\")) {\n    // Store the original URL they were trying to visit\n    const redirectUrl = new URL(\"/auth/signin\", nextUrl.origin);\n    redirectUrl.searchParams.set(\"callbackUrl\", nextUrl.pathname);\n    return NextResponse.redirect(redirectUrl);\n  }\n  \n  // Permit all other scenarios\n  return NextResponse.next();\n}) as unknown as (request: NextRequest) => Promise<NextResponse>;\n\n// Configure which routes the middleware applies to\nexport const config = {\n  // Add all routes that should be protected or have redirect logic\n  matcher: [\n    // Auth routes\n    \"/auth/:path*\",\n\n    // Protected routes\n    \"/\",\n    \"/dashboard/:path*\",\n    \"/inspection/:path*\",\n    \"/viagem/:path*\",\n    \"/api/v1/:path*\",\n    // Add other routes as needed\n  ],\n};\n\n/*\n  // If user IS logged in and tries to access auth pages (prevent logged-in users from seeing login page)\n  if (session?.user && nextUrl.pathname.startsWith(\"/auth/\")) {\n    return NextResponse.redirect(new URL(\"/\", nextUrl.origin));\n  }\n*/\n/*\n  // Verificar se a rota começa com /api/v1\n  const authHeader = req.headers.get(\"authorization\");\n  if (authHeader && req.nextUrl.pathname.startsWith(\"/api/v1\")) {\n    try {\n      // Obter o token do header de autorização\n      if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n        return new NextResponse(\n          JSON.stringify({ error: \"Token não fornecido\" }),\n          { status: 401, headers: { \"Content-Type\": \"application/json\" } }\n        );\n      }\n      const token = authHeader.split(' ')[1];\n\n      \n      if (!account) {\n        return new NextResponse(\n          JSON.stringify({ error: \"Conta não encontrada\" }),\n          { status: 404, headers: { \"Content-Type\": \"application/json\" } }\n        );\n      }\n      return NextResponse.next();\n    } catch (error) {\n      // Token inválido ou expirado\n      return new NextResponse(\n        JSON.stringify({ error: \"Token inválido ou expirado\" }),\n        { status: 401, headers: { \"Content-Type\": \"application/json\" } }\n      );\n    }\n  }\n*/"],"names":[],"mappings":"AAAA,gBAAgB;;;;;AAChB;AAAA;AACA;;;uCAGe,CAAA,GAAA,mHAAA,CAAA,OAAI,AAAD,EAAE,OAAO;IACzB,wDAAwD;IACxD,MAAM,EAAE,MAAM,OAAO,EAAE,GAAG;IAC1B,MAAM,EAAE,OAAO,EAAE,GAAG;IAEpB,+CAA+C;IAC/C,IAAI,SAAS,MAAM,SAAS,WAAW,QAAQ,QAAQ,CAAC,UAAU,CAAC,eAAe;QAChF,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,MAAM;IAC1D;IAEA,+BAA+B;IAC/B,IAAI,QAAQ,QAAQ,CAAC,UAAU,CAAC,sBAAsB;QACpD,oDAAoD;QACpD,IAAI,CAAC,SAAS,QAAQ,CAAC;YAAC;YAAS;SAAO,CAAC,QAAQ,CAAC,SAAS,MAAM,QAAM,WAAW;YAChF,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAsB,GACjC;gBAAE,QAAQ;YAAI;QAElB;IACF;IAEA,mCAAmC;IACnC,IAAI,QAAQ,QAAQ,CAAC,UAAU,CAAC,cAAc;QAC5C,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,gEAAgE;IAChE,IAAI,CAAC,SAAS,QAAQ,CAAC,QAAQ,QAAQ,CAAC,UAAU,CAAC,WAAW;QAC5D,mDAAmD;QACnD,MAAM,cAAc,IAAI,IAAI,gBAAgB,QAAQ,MAAM;QAC1D,YAAY,YAAY,CAAC,GAAG,CAAC,eAAe,QAAQ,QAAQ;QAC5D,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,6BAA6B;IAC7B,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,iEAAiE;IACjE,SAAS;QACP,cAAc;QACd;QAEA,mBAAmB;QACnB;QACA;QACA;QACA;QACA;KAED;AACH,GAEA;;;;;AAKA,IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA"}}]
}