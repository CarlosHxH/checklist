{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma = globalForPrisma.prisma || new PrismaClient();\r\nexport default prisma;\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;uCACjD;AACf,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/app/api/v2/route.ts"],"sourcesContent":["import { prisma } from \"@/prisma\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\n\r\nconst format = async (\r\n  title: string,\r\n  label: \"up\" | \"down\" | \"neutral\",\r\n  interval: number | string,\r\n  occurrences: string | number\r\n) => {\r\n  return {\r\n    title,\r\n    value: `${occurrences}`,\r\n    interval: interval,\r\n    trend: { label, value: \"\" },\r\n    data: [],\r\n  };\r\n};\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const inspections = await prisma.inspection.count({where: { status: \"INSPECAO\" }});\r\n    const viagens = await prisma.inspection.count({where: { NOT: { status: \"INSPECAO\" } }});\r\n    const users = await prisma.user.count();\r\n    const vehicles = await prisma.vehicle.count();\r\n\r\n    // Buscando todos os usuários\r\n    const inspection = await format(\"Inspeções\", \"up\", \"Total\", inspections);\r\n    const viagen = await format(\"Viagens\", \"up\", \"Total\", viagens);\r\n    const user = await format(\"Usuários\", \"down\", \"Total\", users);\r\n    const vehicle = await format(\"Veiculos\", \"neutral\", \"Total\", vehicles);\r\n\r\n    return NextResponse.json([user, viagen, inspection, vehicle]);\r\n  } catch (error) {\r\n    return NextResponse.json({ error }, { status: 403 });\r\n  } finally {\r\n    await prisma.$disconnect();\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,OACb,OACA,OACA,UACA;IAEA,OAAO;QACL;QACA,OAAO,GAAG,aAAa;QACvB,UAAU;QACV,OAAO;YAAE;YAAO,OAAO;QAAG;QAC1B,MAAM,EAAE;IACV;AACF;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,cAAc,MAAM,+GAAA,CAAA,SAAM,CAAC,UAAU,CAAC,KAAK,CAAC;YAAC,OAAO;gBAAE,QAAQ;YAAW;QAAC;QAChF,MAAM,UAAU,MAAM,+GAAA,CAAA,SAAM,CAAC,UAAU,CAAC,KAAK,CAAC;YAAC,OAAO;gBAAE,KAAK;oBAAE,QAAQ;gBAAW;YAAE;QAAC;QACrF,MAAM,QAAQ,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,KAAK;QACrC,MAAM,WAAW,MAAM,+GAAA,CAAA,SAAM,CAAC,OAAO,CAAC,KAAK;QAE3C,6BAA6B;QAC7B,MAAM,aAAa,MAAM,OAAO,aAAa,MAAM,SAAS;QAC5D,MAAM,SAAS,MAAM,OAAO,WAAW,MAAM,SAAS;QACtD,MAAM,OAAO,MAAM,OAAO,YAAY,QAAQ,SAAS;QACvD,MAAM,UAAU,MAAM,OAAO,YAAY,WAAW,SAAS;QAE7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC;YAAM;YAAQ;YAAY;SAAQ;IAC9D,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAM,GAAG;YAAE,QAAQ;QAAI;IACpD,SAAU;QACR,MAAM,+GAAA,CAAA,SAAM,CAAC,WAAW;IAC1B;AACF","debugId":null}}]
}