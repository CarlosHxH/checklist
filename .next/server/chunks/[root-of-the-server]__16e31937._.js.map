{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma = globalForPrisma.prisma || new PrismaClient();\r\nexport default prisma;\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;uCACjD;AACf,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/app/api/v2/dashboard/keys/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/prisma\";\r\n\r\n// GET all keys\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const [users, vehicles, vehicleKeys] = await prisma.$transaction([\r\n      prisma.user.findMany({\r\n        include: {\r\n          vehiclekey: true,\r\n        },\r\n      }),\r\n      prisma.vehicle.findMany(),\r\n      prisma.vehicleKey.findMany({\r\n        include: {\r\n          user: true,\r\n          vehicle: true,\r\n        },\r\n        orderBy: {\r\n          createdAt: \"desc\",\r\n        },\r\n      }),\r\n    ]);\r\n\r\n    return NextResponse.json({\r\n      users,\r\n      vehicles,\r\n      vehicleKeys,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching data:\", error);\r\n    return NextResponse.json({ error: \"Error fetching data\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n// POST new key transfer\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { userId, vehicleId, parentId, id } = body;\r\n\r\n    // Validate input\r\n    if (!userId || !vehicleId) {\r\n      return NextResponse.json(\r\n        { error: \"Missing required fields\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Start transaction\r\n    const newTransfer = await prisma.$transaction(async (tx) => {\r\n      // Check if user exists\r\n      const user = await tx.user.findUnique({ where: { id: userId } });\r\n      if (!user) { throw new Error(\"User not found\") }\r\n\r\n      // Check if vehicle exists\r\n      const vehicle = await tx.vehicle.findUnique({ where: { id: vehicleId } });\r\n      if (!vehicle) { throw new Error(\"Vehicle not found\") }\r\n\r\n      // Create new transfer\r\n      const transfer = await tx.vehicleKey.create({\r\n        data: {\r\n          userId,\r\n          vehicleId,\r\n          parentId,\r\n          status: id?\"CONFIRMED\":\"PENDING\",\r\n        },\r\n        include: {\r\n          user: true,\r\n          vehicle: true,\r\n        },\r\n      });\r\n      return transfer;\r\n    });\r\n\r\n    return NextResponse.json(newTransfer);\r\n  } catch (error) {\r\n    console.error(\"Error creating transfer:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Error creating transfer\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,CAAC,OAAO,UAAU,YAAY,GAAG,MAAM,+GAAA,CAAA,SAAM,CAAC,YAAY,CAAC;YAC/D,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;gBACnB,SAAS;oBACP,YAAY;gBACd;YACF;YACA,+GAAA,CAAA,SAAM,CAAC,OAAO,CAAC,QAAQ;YACvB,+GAAA,CAAA,SAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;gBACzB,SAAS;oBACP,MAAM;oBACN,SAAS;gBACX;gBACA,SAAS;oBACP,WAAW;gBACb;YACF;SACD;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA;YACA;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsB,GAAG;YAAE,QAAQ;QAAI;IAC3E;AACF;AAIO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE,EAAE,GAAG;QAE5C,iBAAiB;QACjB,IAAI,CAAC,UAAU,CAAC,WAAW;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,oBAAoB;QACpB,MAAM,cAAc,MAAM,+GAAA,CAAA,SAAM,CAAC,YAAY,CAAC,OAAO;YACnD,uBAAuB;YACvB,MAAM,OAAO,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;gBAAE,OAAO;oBAAE,IAAI;gBAAO;YAAE;YAC9D,IAAI,CAAC,MAAM;gBAAE,MAAM,IAAI,MAAM;YAAkB;YAE/C,0BAA0B;YAC1B,MAAM,UAAU,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC;gBAAE,OAAO;oBAAE,IAAI;gBAAU;YAAE;YACvE,IAAI,CAAC,SAAS;gBAAE,MAAM,IAAI,MAAM;YAAqB;YAErD,sBAAsB;YACtB,MAAM,WAAW,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;gBAC1C,MAAM;oBACJ;oBACA;oBACA;oBACA,QAAQ,KAAG,cAAY;gBACzB;gBACA,SAAS;oBACP,MAAM;oBACN,SAAS;gBACX;YACF;YACA,OAAO;QACT;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA0B,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}