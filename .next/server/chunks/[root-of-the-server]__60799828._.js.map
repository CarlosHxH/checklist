{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma = globalForPrisma.prisma || new PrismaClient();\r\nexport default prisma;\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;uCACjD;AACf,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/services/inspectionService.ts"],"sourcesContent":["import { prisma } from '@/prisma';\r\nimport { endOfDay, subDays, startOfDay, format } from 'date-fns';\r\n\r\n// Tipo para os dados formatados para o gráfico\r\nexport type InspectionChartData = {\r\n  date: string;\r\n  count: number;\r\n};\r\n\r\n/**\r\n * Retorna as inspeções criadas nos últimos 30 dias agrupadas por data\r\n */\r\nexport async function getInspectionsLast30Days(): Promise<InspectionChartData[]> {\r\n  // Calcula a data de 30 dias atrás\r\n  const thirtyDaysAgo = subDays(new Date(), 30);\r\n  \r\n  // Busca as inspeções no Prisma\r\n  const inspections = await prisma.inspection.findMany({\r\n    where: {\r\n      createdAt: {\r\n        gte: startOfDay(thirtyDaysAgo),\r\n        lte: endOfDay(new Date()),\r\n      },\r\n    },\r\n    orderBy: {\r\n      createdAt: 'asc',\r\n    },\r\n  });\r\n\r\n  // Agrupa inspeções por data\r\n  const inspectionsByDate = inspections.reduce<Record<string, number>>((acc, inspection) => {\r\n    const dateKey = format(inspection.createdAt, 'yyyy-MM-dd');\r\n    acc[dateKey] = (acc[dateKey] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n\r\n  // Preenche datas faltantes nos últimos 30 dias para garantir consistência no gráfico\r\n  const result: InspectionChartData[] = [];\r\n  for (let i = 0; i < 30; i++) {\r\n    const date = format(subDays(new Date(), 30 - i - 1), 'yyyy-MM-dd');\r\n    result.push({\r\n      date,\r\n      count: inspectionsByDate[date] || 0,\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Retorna contagem de inspeções finalizadas vs não-finalizadas nos últimos 30 dias\r\n */\r\nexport async function getInspectionStatusLast30Days() {\r\n  const thirtyDaysAgo = subDays(new Date(), 30);\r\n\r\n  const finishedCount = await prisma.inspection.count({\r\n    where: {\r\n      status: \"INICIO\",\r\n      createdAt: {\r\n        gte: startOfDay(thirtyDaysAgo),\r\n      },\r\n    },\r\n  });\r\n\r\n  const unfinishedCount = await prisma.inspection.count({\r\n    where: {\r\n      status: \"FINAL\",\r\n      createdAt: {\r\n        gte: startOfDay(thirtyDaysAgo),\r\n      },\r\n    },\r\n  });\r\n\r\n  const total = finishedCount;\r\n\r\n  const finishedPercentage = total > 0 ? (finishedCount / total) * 100 : 0;\r\n  const unfinishedPercentage = total > 0 ? (unfinishedCount / total) * 100 : 0;\r\n  Math.round((unfinishedCount / total) * 100) || 0;\r\n  return {\r\n    finished: finishedCount,\r\n    unfinished: unfinishedCount,\r\n    total: total,\r\n    finishedPercentage: finishedPercentage.toFixed(2), // Format to 2 decimal places\r\n    unfinishedPercentage: unfinishedPercentage.toFixed(2), // Format to 2 decimal places\r\n  };\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AAAA;AAAA;;;AAWO,eAAe;IACpB,kCAAkC;IAClC,MAAM,gBAAgB,CAAA,GAAA,wIAAA,CAAA,UAAO,AAAD,EAAE,IAAI,QAAQ;IAE1C,+BAA+B;IAC/B,MAAM,cAAc,MAAM,+GAAA,CAAA,SAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;QACnD,OAAO;YACL,WAAW;gBACT,KAAK,CAAA,GAAA,2IAAA,CAAA,aAAU,AAAD,EAAE;gBAChB,KAAK,CAAA,GAAA,yIAAA,CAAA,WAAQ,AAAD,EAAE,IAAI;YACpB;QACF;QACA,SAAS;YACP,WAAW;QACb;IACF;IAEA,4BAA4B;IAC5B,MAAM,oBAAoB,YAAY,MAAM,CAAyB,CAAC,KAAK;QACzE,MAAM,UAAU,CAAA,GAAA,uJAAA,CAAA,SAAM,AAAD,EAAE,WAAW,SAAS,EAAE;QAC7C,GAAG,CAAC,QAAQ,GAAG,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,IAAI;QACrC,OAAO;IACT,GAAG,CAAC;IAEJ,qFAAqF;IACrF,MAAM,SAAgC,EAAE;IACxC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;QAC3B,MAAM,OAAO,CAAA,GAAA,uJAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,UAAO,AAAD,EAAE,IAAI,QAAQ,KAAK,IAAI,IAAI;QACrD,OAAO,IAAI,CAAC;YACV;YACA,OAAO,iBAAiB,CAAC,KAAK,IAAI;QACpC;IACF;IAEA,OAAO;AACT;AAKO,eAAe;IACpB,MAAM,gBAAgB,CAAA,GAAA,wIAAA,CAAA,UAAO,AAAD,EAAE,IAAI,QAAQ;IAE1C,MAAM,gBAAgB,MAAM,+GAAA,CAAA,SAAM,CAAC,UAAU,CAAC,KAAK,CAAC;QAClD,OAAO;YACL,QAAQ;YACR,WAAW;gBACT,KAAK,CAAA,GAAA,2IAAA,CAAA,aAAU,AAAD,EAAE;YAClB;QACF;IACF;IAEA,MAAM,kBAAkB,MAAM,+GAAA,CAAA,SAAM,CAAC,UAAU,CAAC,KAAK,CAAC;QACpD,OAAO;YACL,QAAQ;YACR,WAAW;gBACT,KAAK,CAAA,GAAA,2IAAA,CAAA,aAAU,AAAD,EAAE;YAClB;QACF;IACF;IAEA,MAAM,QAAQ;IAEd,MAAM,qBAAqB,QAAQ,IAAI,AAAC,gBAAgB,QAAS,MAAM;IACvE,MAAM,uBAAuB,QAAQ,IAAI,AAAC,kBAAkB,QAAS,MAAM;IAC3E,KAAK,KAAK,CAAC,AAAC,kBAAkB,QAAS,QAAQ;IAC/C,OAAO;QACL,UAAU;QACV,YAAY;QACZ,OAAO;QACP,oBAAoB,mBAAmB,OAAO,CAAC;QAC/C,sBAAsB,qBAAqB,OAAO,CAAC;IACrD;AACF","debugId":null}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/app/api/v2/dashboard/chart/lastMonth/route.ts"],"sourcesContent":["import { getInspectionsLast30Days, getInspectionStatusLast30Days } from '@/services/inspectionService';\r\nimport { NextResponse } from 'next/server';\r\n\r\n\r\nexport async function GET() {\r\n  try {\r\n    // Obter dados para o gráfico de linha\r\n    const inspectionsData = await getInspectionsLast30Days();\r\n    \r\n    // Obter estatísticas sobre inspeções finalizadas e não-finalizadas\r\n    const statusData = await getInspectionStatusLast30Days();\r\n\r\n    return NextResponse.json({\r\n      inspectionsByDate: inspectionsData,\r\n      statusSummary: statusData,\r\n    });\r\n  } catch (error) {\r\n    console.error('Erro ao buscar inspeções recentes:', error);\r\n    return NextResponse.json(\r\n      { error: 'Erro ao buscar dados de inspeções' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,sCAAsC;QACtC,MAAM,kBAAkB,MAAM,CAAA,GAAA,sIAAA,CAAA,2BAAwB,AAAD;QAErD,mEAAmE;QACnE,MAAM,aAAa,MAAM,CAAA,GAAA,sIAAA,CAAA,gCAA6B,AAAD;QAErD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,mBAAmB;YACnB,eAAe;QACjB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAoC,GAC7C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}