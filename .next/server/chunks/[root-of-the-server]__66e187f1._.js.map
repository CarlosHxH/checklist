{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma = globalForPrisma.prisma || new PrismaClient();\r\nexport default prisma;\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;uCACjD;AACf,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/jwt.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nexport interface CustomJWT {\r\n\tuser?: {\r\n\t\tid: string;\r\n\t\tusername: string;\r\n\t\tname?: string;\r\n\t\trole?: string;\r\n\t\temail?: string;\r\n\t};\r\n\tcustomClaims?: {\r\n\t\tpermissions?: string[];\r\n\t\tmetadata?: Record<string, any>;\r\n\t};\r\n\tiat?: number;\r\n\texp?: number;\r\n}\r\n\r\nexport const env = {\r\n\tget AUTH_SECRET() {\r\n\t\tif (!process.env.AUTH_SECRET) {\r\n\t\t\tthrow new Error('AUTH_SECRET environment variable is not set');\r\n\t\t}\r\n\t\treturn process.env.AUTH_SECRET;\r\n\t},\r\n};\r\n\r\nexport const decoded = (token: string) => jwt.verify(token, env.AUTH_SECRET) as CustomJWT;\r\nexport const encoded = async (payload: CustomJWT) => await jwt.sign(payload, env.AUTH_SECRET, { expiresIn: '30d' });\r\n\r\nexport async function GenerateAPIToken(user: any) {\r\n\t// Generate API token\r\n\tconst apiToken = jwt.sign(\r\n\t\t{\r\n\t\t\tuserId: user.id,\r\n\t\t\temail: user.email,\r\n\t\t\trole: user.role,\r\n\t\t},\r\n\t\tenv.AUTH_SECRET,\r\n\t\t{ expiresIn: '30d' }\r\n\t);\r\n\t/*\r\n\t\tawait mockPrisma.verificationToken.upsert({\r\n\t\t\twhere: { identifier: user.email },\r\n\t\t\tupdate: {\r\n\t\t\t\ttoken: apiToken,\r\n\t\t\t\texpires: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\r\n\t\t\t},\r\n\t\t\tcreate: {\r\n\t\t\t\tidentifier: user.email,\r\n\t\t\t\ttoken: apiToken,\r\n\t\t\t\texpires: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\r\n\t\t\t},\r\n\t\t});*/\r\n\r\n\treturn apiToken;\r\n}"],"names":[],"mappings":";;;;;;AAAA;;AAkBO,MAAM,MAAM;IAClB,IAAI,eAAc;QACjB,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;YAC7B,MAAM,IAAI,MAAM;QACjB;QACA,OAAO,QAAQ,GAAG,CAAC,WAAW;IAC/B;AACD;AAEO,MAAM,UAAU,CAAC,QAAkB,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,IAAI,WAAW;AACpE,MAAM,UAAU,OAAO,UAAuB,MAAM,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,IAAI,WAAW,EAAE;QAAE,WAAW;IAAM;AAE1G,eAAe,iBAAiB,IAAS;IAC/C,qBAAqB;IACrB,MAAM,WAAW,uIAAA,CAAA,UAAG,CAAC,IAAI,CACxB;QACC,QAAQ,KAAK,EAAE;QACf,OAAO,KAAK,KAAK;QACjB,MAAM,KAAK,IAAI;IAChB,GACA,IAAI,WAAW,EACf;QAAE,WAAW;IAAM;IAEpB;;;;;;;;;;;;KAYI,GAEJ,OAAO;AACR","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/app/api/auth/token/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport prisma from \"@/prisma\";\r\nimport { decoded, encoded } from \"@/jwt\";\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n/*\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      return NextResponse.json({ error: 'Token não fornecido' }, { status: 401 }\r\n      );\r\n    }\r\n*/\r\n    //const token = authHeader.split(' ')[1];\r\n    /*if (!token) {\r\n      return NextResponse.json({ error: \"Erro interno do servidor\" }, { status: 403 });\r\n    }*/\r\n    //const decode = await decoded(token);\r\n    return NextResponse.json({ authHeader });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: \"Erro interno do servidor\" }, { status: 403 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { username, password } = await request.json();\r\n    const user = await prisma.user.findUnique({ where: { username } });\r\n    if (!user || !bcrypt.compareSync(password, user.password)) {\r\n      return NextResponse.json({ error: \"Credenciais inválidas\" }, { status: 403 });\r\n    }\r\n    const { id, role } = user;\r\n    const token = await encoded({\r\n      user: {\r\n        id,\r\n        username,\r\n        role,\r\n      }\r\n    });\r\n\r\n    if (!token) {\r\n      return NextResponse.json({ error: \"Erro interno do servidor\" }, { status: 403 });\r\n    }\r\n    return NextResponse.json({ token });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: \"Erro interno do servidor\" }, { status: 403 });\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QAC3C;;;;;AAKA,GACI,yCAAyC;QACzC;;KAEC,GACD,sCAAsC;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAW;IACxC,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAChF;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QACjD,MAAM,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAS;QAAE;QAChE,IAAI,CAAC,QAAQ,CAAC,mIAAA,CAAA,UAAM,CAAC,WAAW,CAAC,UAAU,KAAK,QAAQ,GAAG;YACzD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwB,GAAG;gBAAE,QAAQ;YAAI;QAC7E;QACA,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG;QACrB,MAAM,QAAQ,MAAM,CAAA,GAAA,4GAAA,CAAA,UAAO,AAAD,EAAE;YAC1B,MAAM;gBACJ;gBACA;gBACA;YACF;QACF;QAEA,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA2B,GAAG;gBAAE,QAAQ;YAAI;QAChF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAM;IACnC,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAChF;AACF","debugId":null}}]
}