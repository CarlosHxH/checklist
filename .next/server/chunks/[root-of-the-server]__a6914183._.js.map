{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma = globalForPrisma.prisma || new PrismaClient();\r\nexport default prisma;\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;uCACjD;AACf,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/utils/index.ts"],"sourcesContent":["// src/utils/index.ts\r\n\r\n/**\r\n * Retorna as datas de início e fim para os últimos 30 dias\r\n * @returns Objeto com startDate (data inicial) e endDate (data atual)\r\n */\r\nexport function getLast30Days() {\r\n  const endDate = new Date();\r\n  endDate.setHours(23, 59, 59, 999); // Fim do dia atual\r\n\r\n  const startDate = new Date();\r\n  startDate.setDate(endDate.getDate() - 29); // 30 dias atrás (incluindo hoje)\r\n  startDate.setHours(0, 0, 0, 0); // Início do dia\r\n\r\n  return { startDate, endDate };\r\n}\r\n\r\n/**\r\n * Formata uma data para exibição\r\n * @param date Data a ser formatada\r\n * @returns String no formato DD/MM\r\n */\r\nexport function formatDateShort(date: Date): string {\r\n  return `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n}\r\n\r\n/**\r\n * Gera um array com as representações de datas dos últimos 30 dias\r\n * @returns Array de strings no formato DD/MM\r\n */\r\nexport function getLast30DaysLabels(): string[] {\r\n  const { startDate } = getLast30Days();\r\n  const labels: string[] = [];\r\n\r\n  for (let i = 0; i < 30; i++) {\r\n    const date = new Date(startDate);\r\n    date.setDate(startDate.getDate() + i);\r\n    labels.push(formatDateShort(date));\r\n  }\r\n\r\n  return labels;\r\n}\r\n\r\nexport function getFullYear(): { startDate: Date, endDate: Date } {\r\n  const currentYear = new Date().getFullYear();\r\n  const startDate = new Date(currentYear, 0, 1);\r\n  const endDate = new Date(currentYear + 1, 0, 1);\r\n  return { startDate, endDate };\r\n}\r\n\r\nexport async function fileToBase64(file: Blob): Promise<string> {\r\n  try {\r\n    const bytes = await file.arrayBuffer();\r\n    const buffer = Buffer.from(bytes);\r\n\r\n    // Fallback for mime type\r\n    const mimeType = 'type' in file ? (file as File).type : 'application/octet-stream';\r\n\r\n    return `data:${mimeType};base64,${buffer.toString('base64')}`;\r\n  } catch (error) {\r\n    console.error('Error converting file to base64:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/*export async function fileToBase64(file: File): Promise<string> {\r\n  const bytes = await file.arrayBuffer();\r\n  const buffer = Buffer.from(bytes);\r\n  return `data:${file.type};base64,${buffer.toString('base64')}`;\r\n}\r\n*/\r\n\r\nexport async function getBase64(file: File) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader()\r\n    reader.readAsDataURL(file)\r\n    reader.onload = () => {\r\n      resolve(reader.result)\r\n    }\r\n    reader.onerror = reject\r\n  })\r\n}\r\n\r\nexport function getDaysInMonth(\r\n  month: number = new Date().getMonth() + 1,\r\n  year: number = new Date().getFullYear()\r\n) {\r\n  const date = new Date(year, month, 0);\r\n  const monthName = date.toLocaleDateString(\"pt-BR\", {\r\n    month: \"short\",\r\n  });\r\n  const daysInMonth = date.getDate();\r\n  const days = [];\r\n  let i = 1;\r\n  while (days.length < daysInMonth) {\r\n    days.push(`${monthName} ${i}`);\r\n    i += 1;\r\n  }\r\n  return days;\r\n}\r\n\r\nexport function filterInspections(obj: any, searchTerm: string): string[] {\r\n  const results: string[] = [];\r\n  function recursiveSearch(current: any, path: string[] = []) {\r\n    // Se for null ou undefined, retorna\r\n    if (current === null || current === undefined) return;\r\n    // Se for string, verifica se inclui o termo buscado\r\n    if (typeof current === \"string\") {\r\n      if (current.toLowerCase().includes(searchTerm.toLowerCase())) {\r\n        results.push([...path, current].join(\" > \"));\r\n      }\r\n      return;\r\n    }\r\n    // Se for array, percorre cada elemento\r\n    if (Array.isArray(current)) {\r\n      current.forEach((item, index) => {\r\n        recursiveSearch(item, [...path, `[${index}]`]);\r\n      });\r\n      return;\r\n    }\r\n    // Se for objeto, percorre suas propriedades\r\n    if (typeof current === \"object\") {\r\n      Object.entries(current).forEach(([key, value]) => recursiveSearch(value, [...path, key]));\r\n    }\r\n  }\r\n  recursiveSearch(obj);\r\n  return results || obj;\r\n}\r\n\r\nexport function formatDate(date: Date | string, format = 'yyyy-MM-dd') {\r\n  if(typeof date === 'string') date = new Date(date);\r\n  const pad = (num: number): string => num.toString().padStart(2, '0');\r\n  return format\r\n    .replace('yyyy', date.getFullYear().toString())\r\n    .replace('yy', date.getFullYear().toString().slice(2))\r\n    .replace('MM', pad(date.getMonth() + 1))\r\n    .replace('dd', pad(date.getDate()))\r\n    .replace('HH', pad(date.getHours()))\r\n    .replace('mm', pad(date.getMinutes()))\r\n    .replace('ss', pad(date.getSeconds()));\r\n}\r\n\r\ninterface CSVOptions {\r\n  filename?: string;\r\n  delimiter?: string;\r\n  headers?: string[];\r\n  dateFormat?: string;\r\n}\r\n\r\n/**\r\n * Utility class to handle CSV exports\r\n */\r\nexport class CSVExporter {\r\n  private static formatDate(date: Date, format = 'yyyy-MM-dd') {\r\n    const pad = (num: number): string => num.toString().padStart(2, '0');\r\n\r\n    return format\r\n      .replace('yyyy', date.getFullYear().toString())\r\n      .replace('MM', pad(date.getMonth() + 1))\r\n      .replace('dd', pad(date.getDate()))\r\n      .replace('HH', pad(date.getHours()))\r\n      .replace('mm', pad(date.getMinutes()))\r\n      .replace('ss', pad(date.getSeconds()));\r\n  }\r\n\r\n  private static formatValue(value: any): string {\r\n    if (value === null || value === undefined) return '';\r\n    if (value instanceof Date) return this.formatDate(value);\r\n    if (typeof value === 'object') return JSON.stringify(value);\r\n    return String(value);\r\n  }\r\n\r\n  /**\r\n   * Exports array of objects to CSV\r\n   */\r\n  static export<T extends object>(\r\n    data: T[],\r\n    options: CSVOptions = {}\r\n  ): void {\r\n    const {\r\n      filename = `export_${this.formatDate(new Date(), 'yyyy-MM-dd_HHmmss')}.csv`,\r\n      delimiter = ';',\r\n      headers,\r\n      dateFormat\r\n    } = options;\r\n\r\n    if (!data.length) {\r\n      console.warn('No data to export');\r\n      return;\r\n    }\r\n\r\n    // Get headers from first object if not provided\r\n    const csvHeaders = headers || Object.keys(data[0]);\r\n\r\n    // Create CSV content\r\n    const csvContent = [\r\n      // Headers row\r\n      csvHeaders.join(delimiter),\r\n      // Data rows\r\n      ...data.map(item =>\r\n        csvHeaders\r\n          .map(header => {\r\n            const value = (item as any)[header];\r\n\r\n            // Format date if dateFormat is provided\r\n            if (value instanceof Date && dateFormat) {\r\n              return this.formatDate(value, dateFormat);\r\n            }\r\n\r\n            // Escape values containing delimiter or quotes\r\n            const formattedValue = this.formatValue(value);\r\n            if (formattedValue.includes(delimiter) || formattedValue.includes('\"')) {\r\n              return `\"${formattedValue.replace(/\"/g, '\"\"')}\"`;\r\n            }\r\n\r\n            return formattedValue;\r\n          })\r\n          .join(delimiter)\r\n      )\r\n    ].join('\\n');\r\n\r\n    // Create and download file\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    /*\r\n    if (navigator.msSaveBlob) { // IE 10+\r\n      navigator.msSaveBlob(blob, filename);\r\n      return;\r\n    }*/\r\n\r\n    const url = URL.createObjectURL(blob);\r\n    link.href = url;\r\n    link.setAttribute('download', filename);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n  }\r\n}\r\n/*\r\n// Example usage:\r\ninterface User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  birthDate: Date;\r\n  active: boolean;\r\n  metadata?: Record<string, any>;\r\n}\r\n/*\r\n// Example data\r\nconst users: User[] = [\r\n  {\r\n    id: 1,\r\n    name: 'John Doe',\r\n    email: 'john@example.com',\r\n    birthDate: new Date('1990-05-15'),\r\n    active: true,\r\n    metadata: { role: 'admin' }\r\n  },\r\n  // ... more users\r\n];\r\n/*\r\n// Basic usage\r\nCSVExporter.exportToCSV(users);\r\n\r\n// Advanced usage with options\r\nCSVExporter.exportToCSV(users, {\r\n  filename: 'users_export.csv',\r\n  delimiter: ';',\r\n  headers: ['ID', 'Name', 'Email', 'Birth Date', 'Status', 'Metadata'],\r\n  dateFormat: 'dd/MM/yyyy'\r\n});*/"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/app/api/v1/viagens/inspection.service.ts"],"sourcesContent":["import { prisma } from \"@/prisma\";\r\n\r\nexport interface InspectionInput {\r\n  id: string | '';\r\n  userId: string;\r\n  vehicleId: string;\r\n  status: \"INICIO\" | \"FINAL\";\r\n  vehicleKey?: string | null;\r\n  crlvEmDia: string;\r\n  certificadoTacografoEmDia: string | null;\r\n  nivelAgua: string;\r\n  nivelOleo: string;\r\n  eixo: string;\r\n  dianteira: string;\r\n  descricaoDianteira: string;\r\n  tracao: string;\r\n  descricaoTracao: string;\r\n  truck?: string | null;\r\n  descricaoTruck?: string | null;\r\n  quartoEixo?: string | null;\r\n  descricaoQuartoEixo?: string | null;\r\n  avariasCabine: string;\r\n  descricaoAvariasCabine?: string | null;\r\n  bauPossuiAvarias: string;\r\n  descricaoAvariasBau?: string | null;\r\n  funcionamentoParteEletrica: string;\r\n  descricaoParteEletrica: string;\r\n  kilometer: string;\r\n  isFinished: boolean;\r\n  extintor: string;\r\n  photos?: [{\r\n    [x: string]: string,\r\n  }]\r\n}\r\n\r\nexport async function createInspectionWithTransaction(validatedData: InspectionInput) {\r\n  const { id, ...data } = validatedData;\r\n\r\n  try {\r\n    return await prisma.$transaction(async (tx) => {\r\n      // 1. Create the inspection record\r\n      const inspection = await tx.inspection.create({\r\n        data: {\r\n          userId: data.userId,\r\n          vehicleId: data.vehicleId,\r\n          status: data.status,\r\n          kilometer: data.kilometer,\r\n          crlvEmDia: data.crlvEmDia,\r\n          certificadoTacografoEmDia: data.certificadoTacografoEmDia,\r\n          nivelAgua: data.nivelAgua,\r\n          nivelOleo: data.nivelOleo,\r\n          avariasCabine: data.avariasCabine,\r\n          descricaoAvariasCabine: data.descricaoAvariasCabine,\r\n          bauPossuiAvarias: data.bauPossuiAvarias,\r\n          descricaoAvariasBau: data.descricaoAvariasBau,\r\n          funcionamentoParteEletrica: data.funcionamentoParteEletrica,\r\n          descricaoParteEletrica: data.descricaoParteEletrica,\r\n          extintor: data.extintor,\r\n          dianteira: data.dianteira,\r\n          descricaoDianteira: data.descricaoDianteira,\r\n          tracao: data.tracao,\r\n          descricaoTracao: data.descricaoTracao,\r\n          truck: data.truck,\r\n          descricaoTruck: data.descricaoTruck,\r\n          quartoEixo: data.quartoEixo,\r\n          descricaoQuartoEixo: data.descricaoQuartoEixo,\r\n          isFinished: true,\r\n          photos: {\r\n            create: data?.photos ? data.photos?.map((photo: any) => ({\r\n              photo: photo.photo,\r\n              type: photo.type,\r\n              description: photo.description\r\n            })) : []\r\n          }\r\n        }\r\n      });\r\n\r\n      let inspect;\r\n      \r\n      if (data.status === \"INICIO\") {\r\n        // For START inspections:\r\n        // Find the most recent open inspection for this vehicle and user or create a new one\r\n        const openInspection = await tx.inspect.findUnique({\r\n          where: {\r\n            id,\r\n            userId: data.userId,\r\n            vehicleId: data.vehicleId,\r\n            endId: null\r\n          }\r\n        });\r\n\r\n        if (openInspection) {\r\n          // Update existing inspection with new startId\r\n          inspect = await tx.inspect.update({\r\n            where: { id: openInspection.id },\r\n            data: { startId: inspection.id }\r\n          });\r\n        } else {\r\n          // Create new Inspect\r\n          inspect = await tx.inspect.create({\r\n            data: {\r\n              userId: data.userId,\r\n              vehicleId: data.vehicleId,\r\n              startId: inspection.id\r\n            }\r\n          });\r\n        }\r\n      } else if (data.status === \"FINAL\") {\r\n        // For END inspections:\r\n        // Try to find an open inspection to update\r\n        const openInspection = await tx.inspect.findFirst({\r\n          where: {\r\n            userId: data.userId,\r\n            vehicleId: data.vehicleId,\r\n            startId: { not: null },\r\n            endId: null\r\n          },\r\n          orderBy: { createdAt: 'desc' }\r\n        });\r\n\r\n        if (openInspection) {\r\n          // Update with endId\r\n          inspect = await tx.inspect.update({\r\n            where: { id: openInspection.id },\r\n            data: { endId: inspection.id }\r\n          });\r\n        } else {\r\n          // Create new with just endId\r\n          inspect = await tx.inspect.create({\r\n            data: {\r\n              userId: data.userId,\r\n              vehicleId: data.vehicleId,\r\n              endId: inspection.id\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      return { inspection, inspect };\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Transaction failed:\", error);\r\n    throw error;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/carlos.dias/Documents/Apps/mui_CHECKLIST/src/app/api/v1/viagens/%5Bid%5D/route.ts"],"sourcesContent":["import { prisma } from \"@/prisma\"\r\nimport { fileToBase64 } from \"@/utils\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { createInspectionWithTransaction } from \"../inspection.service\";\r\n\r\nexport async function GET(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {\r\n\r\n  try {\r\n    const id = (await params).id;\r\n    const inspections = await prisma.inspect.findUnique({\r\n      where: { id },\r\n      include: {\r\n        vehicle: {\r\n          select: {\r\n            id: true,\r\n            model: true,\r\n            plate: true,\r\n            eixo: true,\r\n          },\r\n        },\r\n        start: true,\r\n        end: true,\r\n      }\r\n    });\r\n    return NextResponse.json(inspections)\r\n  } catch (error) {\r\n    return NextResponse.json(error)\r\n  }\r\n}\r\n\r\n\r\nexport async function POST(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {\r\n  try {\r\n    const id = (await params).id;\r\n    const formData = await request.formData();\r\n\r\n    const data: any = {};\r\n    // Process all form fields\r\n    for (const [key, value] of formData.entries()) {\r\n      if (key === 'photos') {\r\n        // Handle multiple photos\r\n        if (!data.photos) data.photos = [];\r\n\r\n        // Check if value is a File or Blob\r\n        if (value instanceof Blob) {\r\n          const base64 = await fileToBase64(value);\r\n          data.photos.push({\r\n            photo: base64,\r\n            type: 'vehicle',\r\n            description: `Veiculo foto-${data.photos.length + 1}`\r\n          });\r\n        }\r\n      } else {\r\n        // Handle regular form fields\r\n        data[key] = value;\r\n      }\r\n    }\r\n\r\n    // Convert isFinished to boolean\r\n    data.isFinished = true;\r\n\r\n    const result = await createInspectionWithTransaction({id,...data});\r\n    //const result = await createInspectionWithTransaction(body);\r\n    return NextResponse.json(result, { status: 201 });\r\n  } catch (error) {\r\n    console.error('Error creating inspection:', error);\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Failed to create inspection',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\nasync function createInspectionWithTransaction({ data, id }: { data: any, id: string }) {\r\n  try {\r\n    const result = await prisma.$transaction(async (tx) => {\r\n      // Crie o registro de inspeção\r\n      const inspection = await tx.inspection.create({ data });\r\n      // Crie o grupo de registro de inspeção\r\n      const inspect = await tx.inspect.upsert({\r\n        where: {\r\n          id: id ?? 'dummy-id',\r\n          ...(inspection.vehicleId ? {} : {}),\r\n        },\r\n        create: {\r\n          userId: data.userId,\r\n          ...(data.status === \"INICIO\"\r\n            ? { startId: inspection.id }\r\n            : { endId: inspection.id }),\r\n        },\r\n        update: {\r\n          userId: data.userId,\r\n          ...(data.status === \"INICIO\"\r\n            ? { startId: inspection.id }\r\n            : { endId: inspection.id }),\r\n        },\r\n      })\r\n      return { inspection, inspect }\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.error('Transaction failed:', error)\r\n    throw error\r\n  }\r\n}*/"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,IAAI,OAAoB,EAAE,EAAE,MAAM,EAAuC;IAE7F,IAAI;QACF,MAAM,KAAK,CAAC,MAAM,MAAM,EAAE,EAAE;QAC5B,MAAM,cAAc,MAAM,+GAAA,CAAA,SAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAClD,OAAO;gBAAE;YAAG;YACZ,SAAS;gBACP,SAAS;oBACP,QAAQ;wBACN,IAAI;wBACJ,OAAO;wBACP,OAAO;wBACP,MAAM;oBACR;gBACF;gBACA,OAAO;gBACP,KAAK;YACP;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B;AACF;AAGO,eAAe,KAAK,OAAoB,EAAE,EAAE,MAAM,EAAuC;IAC9F,IAAI;QACF,MAAM,KAAK,CAAC,MAAM,MAAM,EAAE,EAAE;QAC5B,MAAM,WAAW,MAAM,QAAQ,QAAQ;QAEvC,MAAM,OAAY,CAAC;QACnB,0BAA0B;QAC1B,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,SAAS,OAAO,GAAI;YAC7C,IAAI,QAAQ,UAAU;gBACpB,yBAAyB;gBACzB,IAAI,CAAC,KAAK,MAAM,EAAE,KAAK,MAAM,GAAG,EAAE;gBAElC,mCAAmC;gBACnC,IAAI,iBAAiB,MAAM;oBACzB,MAAM,SAAS,MAAM,CAAA,GAAA,uHAAA,CAAA,eAAY,AAAD,EAAE;oBAClC,KAAK,MAAM,CAAC,IAAI,CAAC;wBACf,OAAO;wBACP,MAAM;wBACN,aAAa,CAAC,aAAa,EAAE,KAAK,MAAM,CAAC,MAAM,GAAG,GAAG;oBACvD;gBACF;YACF,OAAO;gBACL,6BAA6B;gBAC7B,IAAI,CAAC,IAAI,GAAG;YACd;QACF;QAEA,gCAAgC;QAChC,KAAK,UAAU,GAAG;QAElB,MAAM,SAAS,MAAM,CAAA,GAAA,6JAAA,CAAA,kCAA+B,AAAD,EAAE;YAAC;YAAG,GAAG,IAAI;QAAA;QAChE,6DAA6D;QAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,QAAQ;YAAE,QAAQ;QAAI;IACjD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF,EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCC","debugId":null}}]
}